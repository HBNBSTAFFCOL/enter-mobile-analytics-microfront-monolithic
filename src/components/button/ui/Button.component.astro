---
interface Props {
    text: string;
    icon: string;
    id: string;
    type: "fake-input" | "filters-navigation";
    detail?: string;
}

const { text, id, icon, detail, type } = Astro.props;
---

{
    type === "fake-input" && (
        <button
            id={id}
            type="button"
            class="button button--fake-input header__search-button"
        >
            <span class="button__text">{text}</span>
            <figure class="button__icon">
                <img class="button__icon-image" src={icon} alt={text} />
            </figure>
        </button>
    )
}

{
    type === "filters-navigation" && (
        <button id={id} type="button" class="button button--filters-navigation">
            <figure class="button__icon">
                <img class="button__icon-image" src={icon} alt={text} />
            </figure>
            <span class="button__text">{text}</span>
            {typeof detail !== "undefined" && (
                <small class="button__details">{detail}</small>
            )}
        </button>
    )
}




<style>
    .button--fake-input{
        background-color: transparent;
        color: var(--color-brand--text);
        background-color: aliceblue;
        border: none;
        cursor: pointer;
        width: 50%;
        min-width: 125px;
        height: 2rem;
        border-radius: 1rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem;
        box-sizing: border-box;
        transition: all 100ms;
    }

    .button__text {
        margin: unset;
        padding: unset;
        line-height: 1rem;
    }

    .button__icon {
        background-color: var(--color-action--success);
        width: 2rem;
        height: 2rem;
        display: grid;
        place-items: center;
        border-radius: 50%;
        position: relative;
        right: -1rem;
    }

    .button__icon-image {
        width: 50%;
        filter: invert(1);
    }

    .button--fake-input:hover{
        width: 100%;
    }
</style>
