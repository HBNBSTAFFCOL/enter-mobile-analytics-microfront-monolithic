---
import Layout from "../layouts/Layout.astro";
import Header from "../components/header/ui/Header.component.astro";
import Card from "../components/phone-card/ui/Card.component.astro";
import CardComparation from "../components/phone-comparison/ui/card.comparison.astro";
import Slide from "../components/button/ui/slide.component.astro";
import Button from "../components/button/ui/Button.component.astro";

const brand = [
  {
    src: "/icons-brands/icon-Apple.svg",
    name: "Apple",
  },
  {
    src: "/icons-brands/blackview.png",
    name: "Blackview",
  },
  {
    src: "/icons-brands/Cubot_Logo.png",
    name: "Cubot",
  },
  {
    src: "/icons-brands/icon-asus.svg",
    name: "Asus",
  },
  {
    src: "/icons-brands/icon-Balckberry.svg",
    name: "BlackBerry",
  },
  {
    src: "/icons-brands/icon-Cat.svg",
    name: "CAT",
  },
  {
    src: "/icons-brands/icon-Google.svg",
    name: "Google",
  },
  {
    src: "/icons-brands/icon-honor.svg",
    name: "Honor",
  },
  {
    src: "/icons-brands/icon-HTC.png",
    name: "HTC",
  },
  {
    src: "/icons-brands/icon-Huawei.svg",
    name: "Huawei",
  },
  {
    src: "/icons-brands/icon-Lenovo.svg",
    name: "Lenovo",
  },
  {
    src: "/icons-brands/icon-LG.svg",
    name: "LG",
  },
  {
    src: "/icons-brands/meizuo.png",
    name: "Meizu",
  },
  {
    src: "/icons-brands/icon-microsoft.svg",
    name: "Microsoft",
  },
  {
    src: "/icons-brands/icon-Motorola.svg",
    name: "Motorola",
  },
  {
    src: "/icons-brands/nokia.png",
    name: "Nokia",
  },
  {
    src: "/icons-brands/icon-oneplus.svg",
    name: "OnePlus",
  },
  {
    src: "/icons-brands/icon-realme.svg",
    name: "Realme",
  },
  {
    src: "/icons-brands/icon-Samsung.svg",
    name: "Samsung",
  },
  {
    src: "/icons-brands/icon-sony.svg",
    name: "Sony",
  },
  {
    src: "/icons-brands/icon-vivo.svg",
    name: "Vivo",
  },
  {
    src: "/icons-brands/icon-vodafone.svg",
    name: "Vodafone",
  },
  {
    src: "/icons-brands/icon-Xiaomi.svg",
    name: "Xiaomi",
  },
  {
    src: "/icons-brands/iocn-Energizer.png",
    name: "Energizer",
  },
  {
    src: "/icons-brands/iocon-oppo.svg",
    name: "Oppo",
  },
  {
    src: "/icons-brands/Itel_Mobile_logo.png",
    name: "Itel",
  },
  {
    src: "/icons-brands/Logo-Alcatel.png",
    name: "Alcatel",
  },
  {
    src: "/icons-brands/logo-doodgee.png",
    name: "Doogee",
  },
  {
    src: "/icons-brands/micromax.png",
    name: "Micromax",
  },
  {
    src: "/icons-brands/oukitel.png",
    name: "Oukitel",
  },
  {
    src: "/icons-brands/SHARP.png",
    name: "Sharp",
  },
  {
    src: "/icons-brands/tecno.PNG",
    name: "Tecno",
  },
  {
    src: "/icons-brands/Tlc.png",
    name: "TLC",
  },
  {
    src: "/icons-brands/ulefone.png",
    name: "Ulefone",
  },
  {
    src: "/icons-brands/ZTE-logo.svg.png",
    name: "ZTE",
  },
];
---

<Layout title="ENTER.CO MOBILE">
  <main>
    <Header />
    <nav class="brands_container">
      <Slide>
        {
          brand.map(({ src, name }, index) => (
            <li class="brand-self-container">
              <Button type="brands-navigation" icon={src} id={name} />
            </li>
          ))
        }
      </Slide>
    </nav>
    <section class="container-price">
      <div class="price-filter-container">
        <input
          id="min-price-input"
          type="text"
          class="price-input"
          name="price-filter-min"
          placeholder="Mínimo"
          min="39000"
          max="1200000"
          step="1000"
        />

        <span class="separator">-</span>

        <input
          id="max-price-input"
          type="text"
          class="price-input"
          name="price-filter-max"
          placeholder="Máximo"
          min="39000"
          max="1200000"
          step="1000"
        />
      </div>
    </section>
    <!--
			<MainFilters/>
				 -->
    <section class="slide-section">
      <div class="slide-container">
        <Slide cellphone={true}>
          <CardComparation />
          <Card
            id="Iphoneone"
            title="Iphone 15 Pro Max"
            cameraResolution="48MP"
            internalMemory="256GB | 512GB | 1TB"
            ramMemory="8GB"
            batteryCapacity="4441mAh"
            colors={[
              {
                color: "#f7f4ed",
                src: "/phone_images/Apple/iphone15ProMax-White.png",
              },
              {
                color: "#97968d",
                src: "/phone_images/Apple/Iphone15ProMax-Natural.png",
              },
              {
                color: "#585f6f",
                src: "/phone_images/Apple/iphone15ProMax-Blue.png",
              },
              {
                color: "#545454",
                src: "/phone_images/Apple/iphone15ProMax-Black.png",
              },
            ]}
            src="/phone_images/Apple/iphone15ProMax-White.png"
          />
          <Card
            id="Xiaomione"
            title=" Xiaomi 14 Ultra"
            cameraResolution="50MP"
            internalMemory="256GB | 512GB | 1TB"
            ramMemory="12GB | 16GB "
            batteryCapacity="5000mAh"
            colors={[
              {
                color: "#DEDEE0",
                src: "/phone_images/Xiaomi/Xiaomi14Ultra-White.png",
              },
              {
                color: "#2A2A2C",
                src: "/phone_images/Xiaomi/Xiaomi14Ultra-Black.png",
              },
            ]}
            src="/phone_images/Xiaomi/Xiaomi14Ultra-White.png"
          />
          <Card
            id="Samnsungone"
            title="Samsung Galaxy S23 Ultra"
            cameraResolution="200MP"
            internalMemory="256GB | 512GB | 1TB"
            ramMemory="8GB | 12GB "
            batteryCapacity="5000mAh"
            colors={[
              {
                color: "#F1EAE0",
                src: "/phone_images/samsung/SamsungS23Ultra-White.png",
              },
              {
                color: "#D4C7D9",
                src: "/phone_images/samsung/SamsungS23Ultra-Pink.png",
              },
              {
                color: "#5E645A",
                src: "/phone_images/samsung/SamsungS23Ultra-Green.png",
              },
              {
                color: "#211E15",
                src: "/phone_images/samsung/SamsungS23Ultra-Black.png",
              },
            ]}
            src="/phone_images/samsung/SamsungS23Ultra-White.png"
          />
          <Card
            id="Huaweione"
            title="Huawei P60 Pro"
            cameraResolution="50MP"
            internalMemory="256GB | 512GB | 1TB"
            ramMemory="12GB "
            batteryCapacity="5000mAh"
            colors={[
              {
                color: "#EAE8E9",
                src: "/phone_images/Huawei/HuaweiP60Pro-White.png",
              },
              {
                color: "#BFB2D6",
                src: "/phone_images/Huawei/HuaweiP60Pro-Pink.png",
              },
              {
                color: "#2D3E34",
                src: "/phone_images/Huawei/HuaweiP60Pro-Green.png",
              },
              {
                color: "#1E1E20",
                src: "/phone_images/Huawei/HuaweiP60Pro-Black.png",
              },
            ]}
            src="/phone_images/Huawei/HuaweiP60Pro-White.png"
          />
        </Slide>
      </div>
    </section>
  </main>
</Layout>

<script>
  interface Mobile {
    id: string;
    name: string;
    brand: string;
    processor: string;
    // prueba: string;
    ram: string;
    storage: string;
    battery: string;
    screenSize: string;
    screenResolution: string;
    os: string;
    frontCamera: string;
    rearCamera: string;
    features: string[];
    price: number;
    screenType: string;
    rearCameraResolution: string;
    frontCameraResolution: string;
    batteryType: string;
    connectivity: string[];
    dimensions: { height: number; width: number; thickness: number };
    weight: number;
    colors: string[];
    simCapacity: string;
    ports: string[];
    sensors: string[];
    image: string;
  }

  const getMobiles = async (serach = "") => {
    const response = await fetch(
      `${location.origin}/api/v1/phone-search.endpoint?src=${serach}`
    );
    const data = await response.json();
    if (data.error) return console.error(data.error);
    return data as Mobile[];
  };

  const getDetails = async (id: string) => {
    const response = await fetch(
      `${location.origin}/api/v1/phone-details.endpoint?mobile=${id}`
    );
    const data = await response.json();
    if (data.error) return console.error(data.error);
    return data as Mobile[];
  };

  const filterMobile = async (param: string, value: string) => {
    const filter = await fetch(
      `${location.origin}/api/v1/phone-filter.endpoint?${param}=${value}`
    );
    const data = await filter.json();
    if (data.error) return console.error(data.error);
    return data as Mobile[];
  };

  const createMobileUI =
    (
      cardContainer: HTMLElement | DocumentFragment,
      bubble: HTMLElement,
      container: HTMLElement
    ) =>
    (cellphone: Mobile) => {
      const currentCard = cardContainer.cloneNode(true) as HTMLElement;
      currentCard
        .querySelector('[itemid="id"]')!
        .setAttribute("id", cellphone.id);
      currentCard
        .querySelector('[itemprop="image"]')!
        .setAttribute("src", cellphone.image);
      currentCard.querySelector('[itemprop="name"]')!.textContent =
        cellphone.name;
      currentCard.querySelector('[itemprop="rearCamera"]')!.textContent =
        cellphone.rearCamera;
      currentCard.querySelector('[itemprop="storage"]')!.textContent =
        cellphone.storage;
      currentCard.querySelector('[itemprop="ram"]')!.textContent =
        cellphone.ram;
      currentCard.querySelector('[itemprop="battery"]')!.textContent =
        cellphone.battery;

      const ShowComparar = currentCard.querySelector('[itemtype="detalles"]');

      ShowComparar &&
        ShowComparar.addEventListener("click", async () => {
          const comparations = JSON.parse(
            localStorage.getItem("comparar") ?? "[]"
          ) as Array<string>;
          comparations.push(cellphone.name);
          const toSave = Array.from(new Set(comparations).values());
          bubble!.innerText = toSave.length.toString();
          if (toSave.length === 0 || comparations.length === 0) {
            bubble.style.display = "none";
          } else {
            bubble.style.display = "block";
          }
          localStorage.setItem("comparar", JSON.stringify(toSave));
          const mobileList = document.querySelector(
            ".comparison-list"
          ) as HTMLTemplateElement;
          toSave.forEach((newMobileListAdd) => {
            const newMobileList = document.createElement("li");
            newMobileList.textContent = newMobileListAdd;
            mobileList.appendChild(newMobileList);
          });

          const $buttonComparison = document.getElementById(
            "button-comparison"
          ) as HTMLButtonElement;

          if ($buttonComparison) $buttonComparison.click();
        });

      const fallabelaButton = currentCard.querySelector(
        '[itemtype="falabella"]'
      );
      fallabelaButton &&
        fallabelaButton.addEventListener("click", async () => {
          open(
            `https://www.falabella.com.co/falabella-co/search?Ntt=${cellphone.name.toLowerCase()}`,
            "Detalles del producto"
          );
        });

      const ktronixButton = currentCard.querySelector('[itemtype="ktronix"]');
      ktronixButton &&
        ktronixButton.addEventListener("click", async () => {
          open(
            `https://www.ktronix.com/search/?text=${cellphone.name}`,
            "Detalles del producto"
          );
        });

      const addToComparationButton = currentCard.querySelector(
        '[itemtype="comparar"]'
      );
      addToComparationButton &&
        addToComparationButton.addEventListener("click", async () => {
          const comparations = JSON.parse(
            localStorage.getItem("comparar") ?? "[]"
          ) as Array<string>;
          comparations.push(cellphone.name);
          const toSave = Array.from(new Set(comparations).values());
          bubble!.innerText = toSave.length.toString();
          if (toSave.length === 0 || comparations.length === 0) {
            bubble.style.display = "none";
          } else {
            bubble.style.display = "block";
          }

          localStorage.setItem("comparar", JSON.stringify(toSave));

          const mobileList = document.querySelector(
            ".comparison-list"
          ) as HTMLTemplateElement;
          mobileList.innerHTML = "";

          toSave.forEach((newMobileListAdd) => {
            const newMobileList = document.createElement("li");
            newMobileList.textContent = newMobileListAdd;
            mobileList.appendChild(newMobileList);
          });
        });
      container?.append(currentCard);
    };

  document.addEventListener("DOMContentLoaded", async () => {
    const template = document.querySelector(
      "#card-mobile"
    ) as HTMLTemplateElement;
    const container = Array.from(document.querySelectorAll(".slide__cards")).at(
      -1
    ) as HTMLElement;

    const cardContainer = document.importNode(template.content, true);

    const templateComparation = document.querySelector(
      "#compaire_card-mobile"
    ) as HTMLTemplateElement;

    const cardContainerComparation = document.importNode(
      templateComparation.content,
      true
    );

    const bubble = document.querySelector(".bubble__counter") as HTMLElement;
    const comparations = JSON.parse(
      localStorage.getItem("comparar") ?? "[]"
    ) as Array<string>;
    const toSave = Array.from(new Set(comparations).values());
    bubble!.innerText = comparations.length.toString();
    if (toSave.length === 0 || comparations.length === 0) {
      bubble.style.display = "none";
    } else {
      bubble.style.display = "block";
    }

    const cellphones = await getMobiles();
if (!cellphones) return;
container.innerHTML = "";

const limit = 3; // Define el límite de iteraciones
let count = 0; // Inicializa el contador
cellphones.forEach((mobile) => {
    if (count < limit) { // Verifica si se ha alcanzado el límite
        createMobileUI(cardContainer, bubble, container)(mobile);
        count++; // Incrementa el contador después de procesar un elemento
    }
});

    const containers = Array.from(
      document.querySelectorAll(".range__container")
    ) as HTMLElement[];

    containers.forEach(($filterContainer: HTMLElement) => {
      const $range = $filterContainer.querySelector(
        'input[type="range"]'
      ) as HTMLInputElement;

      $range.addEventListener("change", async () => {
        const param = $range.getAttribute("data-unit")!;
        const value = $range.value;
        const searchReal = value + param;

        console.log(param);
        console.log(value);
        const filterData = await getMobiles(searchReal);

        console.log(filterData);
        if (!filterData) return;

        container.innerHTML = "";
        filterData.forEach(createMobileUI(cardContainer, bubble, container));
      });
    });

    const containsBrands = Array.from(
      document.querySelectorAll(".brand-self-container")
    ) as HTMLElement[];

    containsBrands.forEach(($brandcontainer: HTMLElement) => {
      const $brand = $brandcontainer.querySelector(
        ".button.button--brands-navigation"
      ) as HTMLButtonElement;

      $brand.addEventListener("click", async () => {
        const nameBrand = $brand.getAttribute("id");

        const filterData = await filterMobile("brand", nameBrand!);
        if (!filterData) return;

        container.innerHTML = "";
        filterData.forEach(createMobileUI(cardContainer, bubble, container));
      });
    });

    const filterSearch = document.getElementById(
      "filters__search-input"
    ) as HTMLInputElement;

    filterSearch.addEventListener("change", async () => {
      const cellphones = await getMobiles(filterSearch.value);
      if (!cellphones) return;
      container.innerHTML = "";

      cellphones.forEach(createMobileUI(cardContainer, bubble, container));
    });

    const $buttonComparison = document.getElementById(
      "button-comparison"
    ) as HTMLButtonElement;

    if (!$buttonComparison) return;

    $buttonComparison.addEventListener("click", async (event: Event) => {
      event.preventDefault();
      const ceelComparations = JSON.parse(
        localStorage.getItem("comparar") || "[]"
      );

      const filterData = (
        await Promise.all(ceelComparations.map(getMobiles))
      ).flat();
      if (!filterData) return;

      container.innerHTML = "";
      filterData.forEach(
        createMobileUI(cardContainerComparation, bubble, container)
      );
      document.body.click();
    });

    const cleanList = document.querySelector(
      ".list-button-clean"
    ) as HTMLElement;
    const mobileList = document.querySelector(
            ".comparison-list"
          ) as HTMLTemplateElement;

    cleanList.addEventListener("click", async () => {
      mobileList.innerHTML = "";
      localStorage.setItem("comparar", "[]");
      document.body.click();

      const comparations = JSON.parse(
        localStorage.getItem("comparar") ?? "[]"
      ) as Array<string>;
      const toSave = Array.from(new Set(comparations).values());
      if (toSave.length === 0 || comparations.length === 0) {
        bubble.style.display = "none";
      }
    });
  });
</script>

<style>
  main {
    margin: auto;
    padding: unset;
    width: unset;
    max-width: unset;
    .price-filter {
      display: flex;
      align-items: center;
      margin-bottom: 10px;
    }
  }

  .brands_container {
    position: relative;
    width: 50%;
    height: 8vh;
    padding-top: 30px;
    margin: auto;
    gap: 1rem;
  }

  .brand-self-container {
    max-width: 70%; /* Ajusta el ancho máximo según tus necesidades */
    height: auto;
    filter: grayscale(150%) opacity(0.7); /* Convertir la imagen a escala de grises */
    transition:
      filter 100ms,
      transform 150ms;
    transform-origin: center center;
  }

  .brand-self-container:hover {
    filter: none;
    transform: scale(1.1);
    transform-origin: center center;
  }

  .container-price {
    margin-top: 20px;
    display: flex;
    justify-content: center; /* Centrar horizontalmente */
    align-items: center; /* Centrar verticalmente */
  }

  .price-filter-container {
    display: flex;
    align-items: center;
  }

  .price-input {
    padding: 10px;
    font-size: 16px;
    border: 1px solid #ccc;
    border-radius: 5px;
    width: 150px;
  }

  .separator {
    margin: 0 10px;
    font-size: 20px;
  }

  .slide-section {
    height: 580px;
    overflow: hidden;
    position: relative;
    margin-top: 80px;
  }

  .slide-container {
    height: 100%;
    width: 100%;
  }

  @media (max-width: 576px) {
    .slide-section {
      height: 420px;
    }
  }
</style>
